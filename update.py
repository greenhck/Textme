import os
import json
from datetime import datetime
import pytz
import google.generativeai as genai
# Google API Errors ‡§ï‡•ã ‡§á‡§Ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§π‡§Æ ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§™‡§ï‡§°‡§º ‡§∏‡§ï‡•á‡§Ç
from google.genai.errors import APIError, ResourceExhaustedError, InternalError

# --- Configuration ---
API_KEY = os.getenv('GEMINI_API_KEY')
if not API_KEY:
    print("WARNING: GEMINI_API_KEY secret not found! Exiting.")
    exit(1) # Error ‡§ï‡•ã‡§° 1 ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡§æ‡§π‡§∞ ‡§®‡§ø‡§ï‡§≤‡•á‡§Ç

# Client Configuration
try:
    # API Key ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡•ã ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡§∞‡•á‡§Ç
    genai.configure(api_key=API_KEY)
except Exception as e:
    # ‡§Ø‡§¶‡§ø ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§µ‡§ø‡§´‡§≤ ‡§π‡•ã‡§§‡§æ ‡§π‡•à (‡§¶‡•Å‡§∞‡•ç‡§≤‡§≠, ‡§≤‡•á‡§ï‡§ø‡§® ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§)
    print(f"‚ùå Initialization Error: Could not configure Gemini client. Details: {e}")
    exit(1)
    
MODEL_NAME = 'gemini-2.5-flash-lite'

def get_bulk_aura_change_prompt(celebrity_names):
    """‡§¶‡§ø‡§è ‡§ó‡§è ‡§∏‡•á‡§≤‡§ø‡§¨‡•ç‡§∞‡§ø‡§ü‡•Ä ‡§®‡§æ‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§≤‡•ç‡§ï Aura Score ‡§ö‡•á‡§Ç‡§ú ‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    names_string = ", ".join(celebrity_names)
    return (f"Analyze all significant positive and negative news, professional activities, "
            f"social media sentiment, and public statements for the following celebrities "
            f"over the last 24 hours: {names_string}. "
            f"Based on the overall real-world impact for EACH celebrity, generate a single numerical "
            f"value representing the change in their 'Aura Score'. "
            f"Provide the output as a single, valid JSON object where the keys are the celebrity names "
            f"(exactly as provided) and the values are their calculated numerical aura change. "
            f"The output MUST BE ONLY THE JSON OBJECT and nothing else.")

def update_aura_scores():
    data = {}
    # 'response_text' ‡§ï‡•ã API ‡§µ‡§ø‡§´‡§≤ ‡§π‡•ã‡§®‡•á ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠ ‡§ï‡§∞‡•á‡§Ç‡•§
    response_text = "ERROR: Raw response text not captured before API call."
    
    try:
        # 1. Read the existing data
        with open('data.json', 'r') as f:
            data = json.load(f)
            
        celebrities = data.get('celebrities', [])
        celebrity_names = [celeb['name'] for celeb in celebrities]
        
        if not celebrity_names:
            print("No celebrities found in data.json. Exiting.")
            return

        # 2. Setup for API call
        print(f"Making a single API call for {len(celebrity_names)} celebrities...")
        model = genai.GenerativeModel(MODEL_NAME)
        prompt = get_bulk_aura_change_prompt(celebrity_names)
        
        # --- ROBUST API CALL BLOCK START ---
        
        # JSON Enforcement
        try:
            # **‡§Æ‡•â‡§°‡§≤ ‡§∏‡•á ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ï‡•â‡§≤**
            response = model.generate_content(
                prompt,
                config=genai.types.GenerateContentConfig(
                    response_mime_type="application/json"
                )
            )
        
        # 1. Google-specific exceptions ‡§ï‡•ã ‡§™‡§ï‡§°‡§º‡•á‡§Ç (Authentication, Network, Rate Limiting)
        except (APIError, ResourceExhaustedError, InternalError) as e:
            print(f"\nüö® CRITICAL GOOGLE API ERROR DETECTED!")
            print(f"‡§Ø‡§π **‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï, ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® (‡§Ö‡§µ‡•à‡§ß/‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡•Ä ‡§ó‡§à Key), ‡§Ø‡§æ ‡§∞‡•á‡§ü ‡§≤‡§ø‡§Æ‡§ø‡§ü** ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§")
            print(f"Error Type: {type(e).__name__}")
            print(f"Error Details: {e}")
            exit(1) # GitHub Action ‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§µ‡§ø‡§´‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
        
        # 2. ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§Ö‡§®‡•ç‡§Ø I/O ‡§Ø‡§æ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Ö‡§™‡§µ‡§æ‡§¶ ‡§ï‡•ã ‡§™‡§ï‡§°‡§º‡•á‡§Ç ‡§ú‡•ã ‡§ä‡§™‡§∞ ‡§õ‡•Ç‡§ü ‡§ó‡§Ø‡§æ ‡§π‡•ã
        except Exception as e:
            print(f"\n‚ùå UNHANDLED CONNECTION ERROR DETECTED!")
            print(f"‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü API ‡§ï‡•â‡§≤ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§µ‡§ø‡§´‡§≤ ‡§π‡•Å‡§à (model.generate_content)‡•§ ‡§Ø‡§π ‡§®‡§ø‡§Æ‡•ç‡§®-‡§∏‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§Ø‡§æ ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§µ‡§ø‡§´‡§≤‡§§‡§æ ‡§ï‡§æ ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§")
            print(f"Error Details: {e}")
            exit(1)
            
        # --- ROBUST API CALL BLOCK END ---

        # 3. Check for empty or blocked response
        if not response.text or not response.candidates[0].content.parts[0].text:
             response_text = "ERROR: Empty response received from Gemini API. Check for Safety/Policy block."
             raise ValueError(response_text) # ‡§¨‡•á‡§π‡§§‡§∞ ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§ú‡§¨‡§∞‡§¶‡§∏‡•ç‡§§‡•Ä ‡§ï‡§∞‡•á‡§Ç

        response_text = response.text.strip()
        aura_changes = json.loads(response_text) 
        
        print("Successfully received and parsed bulk aura changes.")

        # 4. Loop through celebrities and update their data (Score logic remains same)
        for celeb in celebrities:
            # Aura score ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç, ‡§Ø‡§¶‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ ‡§§‡•ã ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü 0.0
            aura_change = aura_changes.get(celeb['name'], 0.0)
            
            try:
                change_value = float(aura_change)
            except ValueError:
                print(f"Warning: Non-numeric change received for {celeb['name']}: {aura_change}. Setting change to 0.0.")
                change_value = 0.0
            
            celeb['previous_aura_score'] = celeb['aura_score']
            celeb['aura_score'] = round(celeb['aura_score'] + change_value, 2)
            
            # Trend 7_days ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
            trend = celeb.get('trend_7_days', [celeb['aura_score']] * 7)
            trend = trend[-6:] 
            trend.append(celeb['aura_score'])
            celeb['trend_7_days'] = trend

        # 5. Update the timestamp to IST (Asia/Kolkata)
        ist = pytz.timezone('Asia/Kolkata')
        data['last_updated'] = datetime.now(ist).strftime('%d-%m-%Y %H:%M:%S IST')

        # 6. Write back the updated data
        with open('data.json', 'w') as f:
            json.dump(data, f, indent=4)
            
        print("Aura Market data updated successfully.")

    except (json.JSONDecodeError, ValueError) as e:
        # JSONDecodeError/ValueError ‡§Ö‡§¨ ‡§§‡§≠‡•Ä ‡§Ü‡§è‡§ó‡§æ ‡§ú‡§¨ API ‡§ï‡•â‡§≤ ‡§∏‡§´‡§≤ ‡§π‡•ã ‡§≤‡•á‡§ï‡§ø‡§® response JSON ‡§® ‡§π‡•ã
        print(f"CRITICAL ERROR: Failed to process API response (JSON/Data Error). Raw response:\n---START RAW RESPONSE---\n{response_text}\n---END RAW RESPONSE---\nError: {e}")
        exit(1)
    except Exception as e:
        # ‡§Ø‡§π ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§Ö‡§®‡•ç‡§Ø ‡§Ö‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§æ‡§∂‡§ø‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§ï‡•ã ‡§™‡§ï‡§°‡§º‡•á‡§ó‡§æ (‡§ú‡•à‡§∏‡•á ‡§´‡§º‡§æ‡§á‡§≤ ‡§ì‡§™‡§® ‡§è‡§∞‡§∞)
        print(f"A critical error occurred (File/Logic Error): {e}")
        exit(1)

if __name__ == '__main__':
    update_aura_scores()
